import { n as createComponent, o as renderTemplate, p as maybeRenderHead, z as unescapeHTML } from './astro/server_Bs8d6JLF.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<p><a href=\"https://resume-wizard-six.vercel.app/\" target=\"_blank\"><img alt=\"Resume Wizard Screenshot\" src=\"/resume-wizard-screenshot.png\"></a></p>\n<h2 id=\"overview\">Overview</h2>\n<p><strong>Resume Wizard</strong> is my first substantial project built with React. The primary objective was to practice and enhance my skills with this shiny new UI/UX Library.</p>\n<p>It’s a clean and minimal app that helps users build their resumes step-by-step, then generates a PDF they can download.</p>\n<h2 id=\"key-features\">Key Features</h2>\n<ul>\n<li><strong>User-Friendly Interface:</strong> A simple, wizard-style setup that collects user information one section at a time.</li>\n<li><strong>PDF Generation:</strong> Uses <a href=\"https://github.com/parallax/jsPDF\" target=\"_blank\">jsPDF</a> to turn resume data into a downloadable PDF.</li>\n<li><strong>Custom Inputs:</strong> Input fields with labels that move out of the way when you type, keeping the design clean and accessible.</li>\n<li><strong>Easy Navigation:</strong> Buttons to jump back to previous sections for quick edits.</li>\n</ul>\n<h2 id=\"technologies-used\">Technologies Used</h2>\n<ul>\n<li><strong>Frontend</strong>: React, JavaScript, HTML, CSS</li>\n<li><strong>Build Tool</strong>: Vite</li>\n<li><strong>Deployment</strong>: Vercel</li>\n<li><strong>PDF Library</strong>: jsPDF</li>\n</ul>\n<h2 id=\"development-journey\">Development Journey</h2>\n<p>Building Resume Wizard was tough but rewarding.</p>\n<p>I started with a basic, but full implementation, then ultimately decided to re-approach the project with the goal of better applying React principles as well as integrating a third-party PDF-generation library. I figured building the second iteration would give me plenty of opportunity to not only hone my new React skills, but also to drill-down on JavaScript fundamentals, third-party library usage, and Responsive-design techniques.</p>\n<p>There was admittedly quite a bit more trial and error than I anticipated going into the second approach, but I’m certain that I’m a much stronger developer because of it.</p>\n<h2 id=\"challenges\">Challenges</h2>\n<ul>\n<li><strong>PDF Generation:</strong> Finding and using a PDF library was tricky because of my limited knowledge of the inner-workings of PDFs. I had to research a few different libraries before finding the one I felt was most optimal for this project.</li>\n<li><strong>Interface Design:</strong> Balancing the HTML structure with the logic of the application was difficult. Next time, I think allocating a bit more time to sketching out the design first will better streamline and speed-up the entire process altogether.</li>\n</ul>\n<h2 id=\"what-i-learned\">What I Learned</h2>\n<p>This project helped me to learn and improve multiple skills:</p>\n<ul>\n<li>React state management and object destructuring</li>\n<li>Creating custom hooks and avoiding prop-drilling</li>\n<li>Using state effectively, working with nested components, and data mapping</li>\n<li>Filtering objects and using ternary operators</li>\n<li>Deploying a project through Vercel</li>\n<li>Working with external JavaScript Libraries and reviewing documentation</li>\n</ul>\n<h2 id=\"future-improvements\">Future Improvements</h2>\n<p>If I had more time, I’d refactor the code to be even more modular and reduce repetition. I feel that doing this on initial-write of a codebase is a skill that will improve greatly through deliberate practice, and the second approach on this project certainly propelled me in this regard.</p>";

				const frontmatter = {"title":"Resume Wizard","description":"Web application that guides users through creating professional resumes utilizing React","date":"Jun 20 2024","demoURL":"https://resume-wizard-six.vercel.app/","repoURL":"https://github.com/josephdanielm/resume-wizard"};
				const file = "/Users/josephmudd/repos/josephmudd.dev/src/content/projects/resume-wizard/index.md";
				const url = undefined;
				function rawContent() {
					return "\n<a href=\"https://resume-wizard-six.vercel.app/\" target=\"_blank\"><img alt=\"Resume Wizard Screenshot\" src=\"/resume-wizard-screenshot.png\" /></a>\n\n## Overview\n\n**Resume Wizard** is my first substantial project built with React. The primary objective was to practice and enhance my skills with this shiny new UI/UX Library.\n\nIt's a clean and minimal app that helps users build their resumes step-by-step, then generates a PDF they can download.\n\n## Key Features\n\n- **User-Friendly Interface:** A simple, wizard-style setup that collects user information one section at a time.\n- **PDF Generation:** Uses <a href=\"https://github.com/parallax/jsPDF\" target=\"_blank\">jsPDF</a> to turn resume data into a downloadable PDF.\n- **Custom Inputs:** Input fields with labels that move out of the way when you type, keeping the design clean and accessible.\n- **Easy Navigation:** Buttons to jump back to previous sections for quick edits.\n\n## Technologies Used\n\n- **Frontend**: React, JavaScript, HTML, CSS\n- **Build Tool**: Vite\n- **Deployment**: Vercel\n- **PDF Library**: jsPDF\n\n## Development Journey\n\nBuilding Resume Wizard was tough but rewarding.\n\nI started with a basic, but full implementation, then ultimately decided to re-approach the project with the goal of better applying React principles as well as integrating a third-party PDF-generation library. I figured building the second iteration would give me plenty of opportunity to not only hone my new React skills, but also to drill-down on JavaScript fundamentals, third-party library usage, and Responsive-design techniques.\n\nThere was admittedly quite a bit more trial and error than I anticipated going into the second approach, but I'm certain that I'm a much stronger developer because of it.\n\n## Challenges\n\n- **PDF Generation:** Finding and using a PDF library was tricky because of my limited knowledge of the inner-workings of PDFs. I had to research a few different libraries before finding the one I felt was most optimal for this project.\n- **Interface Design:** Balancing the HTML structure with the logic of the application was difficult. Next time, I think allocating a bit more time to sketching out the design first will better streamline and speed-up the entire process altogether.\n\n## What I Learned\n\nThis project helped me to learn and improve multiple skills:\n\n- React state management and object destructuring\n- Creating custom hooks and avoiding prop-drilling\n- Using state effectively, working with nested components, and data mapping\n- Filtering objects and using ternary operators\n- Deploying a project through Vercel\n- Working with external JavaScript Libraries and reviewing documentation\n\n## Future Improvements\n\nIf I had more time, I'd refactor the code to be even more modular and reduce repetition. I feel that doing this on initial-write of a codebase is a skill that will improve greatly through deliberate practice, and the second approach on this project certainly propelled me in this regard.\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"overview","text":"Overview"},{"depth":2,"slug":"key-features","text":"Key Features"},{"depth":2,"slug":"technologies-used","text":"Technologies Used"},{"depth":2,"slug":"development-journey","text":"Development Journey"},{"depth":2,"slug":"challenges","text":"Challenges"},{"depth":2,"slug":"what-i-learned","text":"What I Learned"},{"depth":2,"slug":"future-improvements","text":"Future Improvements"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
